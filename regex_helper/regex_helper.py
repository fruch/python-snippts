#!/usr/bin/env python
# -*- coding: iso-8859-1 -*-
# generated by wxGlade 0.6.3 on Wed Apr 01 21:45:59 2009

import wx
import re
import os
# begin wxGlade: extracode
# end wxGlade

wildcard = "Python source (*.py)|*.py|"     \
           "Text Files (*.txt)|*.txt|" \
           "C Code (*.c;*.h)|*.c;*.h|"    \
           "All files (*.*)|*.*"
           
class MyFrame(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: MyFrame.__init__
        kwds["style"] = wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.regexTextCtrl = wx.TextCtrl(self, -1, "", style=wx.TE_PROCESS_ENTER|wx.TE_PROCESS_TAB|wx.TE_MULTILINE|wx.TE_RICH2)
        self.testTextCtrl = wx.TextCtrl(self, -1, "", style=wx.TE_PROCESS_ENTER|wx.TE_PROCESS_TAB|wx.TE_MULTILINE|wx.TE_RICH2)
        self.refreshButton = wx.Button(self, wx.ID_REFRESH, "")
        self.openButton = wx.Button(self, wx.ID_OPEN, "")
        self.colorButton = wx.Button(self, -1, "Color")
        self.button_1 = wx.Button(self, -1, "Help")
        self.closeButton = wx.Button(self, wx.ID_CLOSE, "")
        self.RegexFrame_statusbar = self.CreateStatusBar(1, wx.ST_SIZEGRIP)
        
        # Menu Bar
        self.RegexFrame_menubar = wx.MenuBar()
        wxglade_tmp_menu = wx.Menu()
        self.Open = wx.MenuItem(wxglade_tmp_menu, 101, "&Open", "Open a file to wok with", wx.ITEM_NORMAL)
        wxglade_tmp_menu.AppendItem(self.Open)
        wxglade_tmp_menu.AppendSeparator()
        wxglade_tmp_menu.Append(102, "&Close", "", wx.ITEM_NORMAL)
        self.RegexFrame_menubar.Append(wxglade_tmp_menu, "&File")
        wxglade_tmp_menu = wx.Menu()
        wxglade_tmp_menu.Append(201, "&Color", "Change the color of regex selection", wx.ITEM_NORMAL)
        wxglade_tmp_menu.Append(202, "&Refresh", "Find the group regex in the text and mark them", wx.ITEM_NORMAL)
        self.RegexFrame_menubar.Append(wxglade_tmp_menu, "&View")
        wxglade_tmp_menu = wx.Menu()
        wxglade_tmp_menu.Append(301, "&Provide Example", "", wx.ITEM_NORMAL)
        self.RegexFrame_menubar.Append(wxglade_tmp_menu, "&Help")
        self.SetMenuBar(self.RegexFrame_menubar)
        # Menu Bar end

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_TEXT, self.onRegexChange, self.regexTextCtrl)
        self.Bind(wx.EVT_BUTTON, self.onRefreshButton, self.refreshButton)
        self.Bind(wx.EVT_BUTTON, self.onOpenButton, self.openButton)
        self.Bind(wx.EVT_BUTTON, self.onColorButton, self.colorButton)
        self.Bind(wx.EVT_BUTTON, self.onHelpButton, self.button_1)
        self.Bind(wx.EVT_BUTTON, self.onCloseButton, self.closeButton)
        self.Bind(wx.EVT_MENU, self.onOpenMenu, self.Open)
        self.Bind(wx.EVT_MENU, self.onCloseMenu, id=102)
        self.Bind(wx.EVT_MENU, self.onColorMenu, id=201)
        self.Bind(wx.EVT_MENU, self.onRefreshMenu, id=202)
        self.Bind(wx.EVT_MENU, self.onHelpMenu, id=301)
        # end wxGlade
        
        self.Bind(wx.EVT_CLOSE, self.onCloseButton)
        self.FAILED_COLOR = wx.Colour(255, 0, 0)
        self.PASSED_COLOR = wx.Colour(0, 255, 0)
        self.PASSED_STATUS_COLOR = wx.Colour(35, 142, 35)
        self.MARKER_COLOR = wx.Colour(0, 255, 0)
        
    def __set_properties(self):
        # begin wxGlade: MyFrame.__set_properties
        self.SetTitle("Regex Helper")
        self.RegexFrame_statusbar.SetStatusWidths([-1])
        # statusbar fields
        RegexFrame_statusbar_fields = [""]
        for i in range(len(RegexFrame_statusbar_fields)):
            self.RegexFrame_statusbar.SetStatusText(RegexFrame_statusbar_fields[i], i)
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: MyFrame.__do_layout
        sizer_1 = wx.BoxSizer(wx.VERTICAL)
        sizer_2 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_1.Add(self.regexTextCtrl, 4, wx.EXPAND, 0)
        sizer_1.Add(self.testTextCtrl, 7, wx.EXPAND, 0)
        sizer_2.Add(self.refreshButton, 0, 0, 0)
        sizer_2.Add(self.openButton, 0, wx.LEFT, 10)
        sizer_2.Add(self.colorButton, 0, wx.LEFT, 10)
        sizer_2.Add(self.button_1, 0, wx.LEFT, 10)
        sizer_2.Add(self.closeButton, 0, wx.LEFT, 10)
        sizer_1.Add(sizer_2, 1, wx.ALL|wx.ALIGN_BOTTOM|wx.ALIGN_CENTER_HORIZONTAL, 5)
        self.SetSizer(sizer_1)
        sizer_1.Fit(self)
        self.Layout()
        # end wxGlade

    def onRegexChange(self, event): # wxGlade: MyFrame.<event_handler>
        try:  res = re.compile( \
            self.regexTextCtrl.GetValue(), re.MULTILINE | re.DOTALL | re.VERBOSE).finditer(self.testTextCtrl.GetValue())
        except Exception, err:
            print err.message, err.args
            self.setRegexFail(err.message)
            event.Skip()
            return
        self.setRegexPass()
        event.Skip()

    def onRefreshButton(self, event): # wxGlade: MyFrame.<event_handler>
        self.testTextCtrl.SetStyle(0, len(self.testTextCtrl.GetValue()), \
                    wx.TextAttr(colBack=wx.WHITE))
        try:  res = re.compile( \
            self.regexTextCtrl.GetValue(), re.MULTILINE | re.DOTALL | re.VERBOSE).finditer(self.testTextCtrl.GetValue())
        except Exception, err:
            print dir(err), err.message, err.args
            return
        for i, match in enumerate(res):
            for g, text in enumerate(match.groups()):
                print g + 1, text
                self.testTextCtrl.SetStyle(match.start(g+1), match.end(g+1), \
                    wx.TextAttr(colBack=self.MARKER_COLOR))

    def onOpenButton(self, event): # wxGlade: MyFrame.<event_handler>
        print "CWD: %s\n" % os.getcwd()
        dlg = wx.FileDialog(
            self, message="Choose a file",
            defaultDir=os.getcwd(), 
            defaultFile="",
            wildcard=wildcard,
            style=wx.OPEN | wx.CHANGE_DIR
            )
        if dlg.ShowModal() == wx.ID_OK:
            # This returns a Python list of files that were selected.
            paths = dlg.GetPaths()
            for path in paths:
               self.testTextCtrl.SetValue(open(path).read())

        dlg.Destroy()

        self.testTextCtrl.SetStyle(0, len(self.testTextCtrl.GetValue()), \
                    wx.TextAttr(colBack=wx.WHITE))

    def onColorButton(self, event): # wxGlade: MyFrame.<event_handler>
        dlg = wx.ColourDialog(self)
        dlg.GetColourData().SetChooseFull(True)

        if dlg.ShowModal() == wx.ID_OK:

            self.MARKER_COLOR = dlg.GetColourData().GetColour().Get()
        
    def onCloseButton(self, event): # wxGlade: MyFrame.<event_handler>
        RegexHelper.Exit()
        
    def setRegexPass(self):
        self.regexTextCtrl.SetStyle(0, len(self.regexTextCtrl.GetValue()), \
                    wx.TextAttr(colBack=self.PASSED_COLOR))
        self.RegexFrame_statusbar.SetBackgroundColour(self.PASSED_STATUS_COLOR)
        self.RegexFrame_statusbar.SetLabel("Regex Compiled OK")
        
    def setRegexFail(self, message):
        self.regexTextCtrl.SetStyle(0, len(self.regexTextCtrl.GetValue()), \
            wx.TextAttr(colBack=self.FAILED_COLOR))
        self.RegexFrame_statusbar.SetBackgroundColour(self.FAILED_COLOR)
        self.RegexFrame_statusbar.SetLabel("Error: " + message)
    def onHelpButton(self, event): # wxGlade: MyFrame.<event_handler>
        self.regexTextCtrl.SetValue('''\#include  
\s*                                        # spaces until filename
("|\<)(?P<filename>.*?[^("|\>)])("|\>)
.*?\n                                   # newline at the end''')
        self.testTextCtrl.SetValue('''
#include "myfile.h"
#include "mynaem.h"
#include                       "spaces.h"
						#include "tabbed.h"
#include <inner.h>
	''')
        self.testTextCtrl.SetStyle(0, len(self.testTextCtrl.GetValue()), \
                    wx.TextAttr(colBack=wx.WHITE))

    def onOpenMenu(self, event): # wxGlade: MyFrame.<event_handler>
        self.onOpenButton(event)

    def onCloseMenu(self, event): # wxGlade: MyFrame.<event_handler>
        self.onCloseButton(event)

    def onColorMenu(self, event): # wxGlade: MyFrame.<event_handler>
        self.onColorButton(event)

    def onRefreshMenu(self, event): # wxGlade: MyFrame.<event_handler>
        self.onRefreshButton(event)

    def onHelpMenu(self, event): # wxGlade: MyFrame.<event_handler>
        self.onHelpButton(event)

# end of class MyFrame

class MyApp(wx.App):
    def OnInit(self):
        wx.InitAllImageHandlers()
        RegexFrame = MyFrame(None, -1, "")
        self.SetTopWindow(RegexFrame)
        self.SetExitOnFrameDelete(True)
        RegexFrame.Show()
        return 1

# end of class MyApp

if __name__ == "__main__":
    import gettext
    gettext.install("RegexHelper") # replace with the appropriate catalog name

    RegexHelper = MyApp(0)
    RegexHelper.MainLoop()
